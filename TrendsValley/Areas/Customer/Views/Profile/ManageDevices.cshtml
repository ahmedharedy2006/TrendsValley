@model IEnumerable<TrendsValley.Models.Models.UserDevice>
@{
    Layout = "~/Areas/Customer/Views/Shared/_ProfileLayout.cshtml";
}

@if (TempData["SuccessMessage"] != null)
{
    <div id="successMessage" class="fixed top-4 right-4 z-50 animate-fade-in">
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg flex items-center justify-between">
            <span class="flex items-center">
                <i class="fas fa-check-circle mr-2"></i>
                @TempData["SuccessMessage"]
            </span>
            <button type="button" class="text-green-700 hover:text-green-900" onclick="closeMessage('successMessage')">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
}

<div class="mb-6 lg:mb-8">
    <h2 class="text-xl lg:text-2xl font-bold text-gray-800">Device Management</h2>
    <p class="text-gray-500 text-sm lg:text-base">View and manage all connected devices</p>
</div>

<!-- Stats Box -->
<div class="bg-primary bg-opacity-10 p-4 lg:p-6 rounded-xl mb-6">
    <div class="flex flex-col md:flex-row justify-between gap-4">
        <div class="text-center">
            <p class="text-sm text-gray-600">Total Devices</p>
            <p class="text-2xl font-bold text-gray-800">@Model.Count()</p>
        </div>
        <div class="text-center">
            <p class="text-sm text-gray-600">Most Used OS</p>
            <p class="text-2xl font-bold text-gray-800">@(Model.GroupBy(d => d.OS).OrderByDescending(g => g.Count()).FirstOrDefault()?.Key ?? "N/A")</p>
        </div>
        <div class="text-center">
            <p class="text-sm text-gray-600">Last Activity</p>
            <p class="text-2xl font-bold text-gray-800">@(Model.Max(d => d.LastLoginDate)?.ToString("MMM dd") ?? "N/A")</p>
        </div>
    </div>
</div>

<!-- Devices List -->
<div class="bg-white p-4 lg:p-6 rounded-xl shadow-sm border border-gray-100">
    <div class="space-y-4">
        @foreach (var device in Model)
        {
            <div class="@(device.DeviceToken == Context.Request.Cookies["DeviceToken"] ?
                    "border-r-4 border-primary bg-primary bg-opacity-5" :
                    "border-b border-gray-100")
                    p-4 rounded-lg transition-colors duration-200">

                @if (device.DeviceToken == Context.Request.Cookies["DeviceToken"])
                {
                    <span class="inline-block bg-primary text-white px-2 py-1 rounded-full text-xs mb-2">
                        <i class="fas fa-check-circle mr-1"></i>
                        Current Device
                    </span>
                }

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <!-- Device Info -->
                    <div>
                        <p class="text-sm text-gray-500">Device Name</p>
                        <p class="font-medium text-gray-800">@device.DeviceName</p>
                    </div>

                    <!-- Location Info -->
                    <div>
                        <p class="text-sm text-gray-500">Location</p>
                        <p class="text-gray-800">@device.Location</p>
                    </div>

                    <!-- Activity Info -->
                    <div>
                        <p class="text-sm text-gray-500">Last Activity</p>
                        <p class="text-gray-800">@device.LastLoginDate?.ToString("MMM dd, yyyy h:mm tt")</p>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2">
                    <!-- OS Info -->
                    <div>
                        <p class="text-sm text-gray-500">Operating System</p>
                        <p class="text-gray-800">@device.OS</p>
                    </div>

                    <!-- IP Address -->
                    <div>
                        <p class="text-sm text-gray-500">IP Address</p>
                        <p class="text-gray-800">@device.IpAddress</p>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex justify-end items-end">
                        @if (device.DeviceToken != Context.Request.Cookies["DeviceToken"])
                        {
                            <form asp-action="RemoveDevice" method="post">
                                <input type="hidden" name="deviceId" value="@device.Id" />
                                <button type="submit"
                                        class="text-red-500 hover:text-red-700 text-sm font-medium flex items-center">
                                    <i class="fas fa-trash-alt mr-1"></i> Remove
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Bulk Actions -->
    @if (Model.Count() > 1)
    {
        <div class="mt-6 pt-4 border-t border-gray-100">
            <form asp-action="RemoveInactiveDevices" method="post">
                <button type="submit"
                        class="text-red-500 hover:text-red-700 text-sm font-medium flex items-center">
                    <i class="fas fa-trash-alt mr-1"></i> Remove All Inactive Devices
                </button>
            </form>
        </div>
    }

    <!-- Back Link -->
    <div class="mt-6">
        <a asp-action="Security"
           class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors inline-flex items-center text-sm font-medium">
            <i class="fas fa-arrow-left mr-2"></i> Back to Security
        </a>
    </div>
</div>

@section Scripts {
    <script>
        // Close success message
        setTimeout(() => {
            const successMessage = document.getElementById('successMessage');
            if (successMessage) {
                successMessage.classList.add('animate-fade-out');
                setTimeout(() => successMessage.remove(), 1000);
            }
        }, 5000);

        function closeMessage(id) {
            let element = document.getElementById(id);
            if (element) {
                element.classList.add('animate-fade-out');
                setTimeout(() => element.remove(), 1000);
            }
        }

        // Confirm device removal
        document.querySelectorAll('form[action$="RemoveDevice"]').forEach(form => {
            form.addEventListener('submit', function(e) {
                if (!confirm('Are you sure you want to remove this device?')) {
                    e.preventDefault();
                }
            });
        });

        // Check for new logins periodically
        setInterval(() => {
            fetch('/Profile/CheckNewLogins')
                .then(response => response.json())
                .then(data => {
                    if (data.hasNewLogin) {
                        const notif = new Notification('New login detected', {
                            body: `New login from ${data.deviceName}`,
                            icon: '/images/logo.png'
                        });
                    }
                });
        }, 30000); // Every 30 seconds
    </script>
}

<style>
    .animate-fade-in {
        opacity: 0;
        transform: translateY(-10px);
        animation: fadeIn 0.5s ease-out forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-fade-out {
        animation: fadeOut 1s ease-out forwards;
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
            transform: translateY(0);
        }

        to {
            opacity: 0;
            transform: translateY(-10px);
        }
    }
</style>